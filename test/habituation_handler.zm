
import std_sound_output_device;

State habituation_handler
{
    // states
    on_event:entry()
    {
        faces = face_images;
        movie = movie1_frames;
        prepareTestGraphics();
        attention.enter();
    }

    on_event:exit()
    {
        timeout.abort();
        eraseLookingTimeClock();
        arrowSymbolOff(int(FRONT));
        unloadImages();
    }

//    on_event()
//    {
//        if (event_code == EVENT_START)
//        {
//            switch_to_state(attention);
//        }
//    }

    State attention
    {
        on_entry()
        {
            startAttentionGetter(now());
            arrowSymbolOn(int(FRONT));
        }

//        on_event()
//        {
//            if (event_code == EVENT_START)
//            {
//                stopAttentionGetter();
//                startLookingTimeClock(event_time + 5ms);
//                experiment.habituation.beginTrial(event_time + 5ms);
//                switch_to_state(looking);
//            }
//        }
    }

    State looking
    {
//        on_event()
//        {
//            if (event_code == EVENT_STOP)
//            {
//                timeout.start(event_time + MAX_LOOK_AWAY_DURATION);
//                stopLookingTimeClock(event_time);
//                switch_to_state(looking_away);
//            }
//        }
    }

    State looking_away
    {
//        on_event()
//        {
//            if (event_code == EVENT_START)
//            {
//                timeout.abort();
//                continueLookingTimeClock(event_time);
//                switch_to_state(looking);
//            }
//        }
    }

    //---------- timer sound chains

    Timer timeout
    {
        on_expire()
        {
            stopLookingTimeClock(expire_time);
            experiment.habituation.timedOut(expire_time);
        }
    }

    SoundChain audio
    {

        SoundFile clip {}

        SoundPlayback {}

        on_event:start()
        {
            control.show_speaker_icon();
        }

        on_event:finish()
        {
            control.hide_speaker_icon(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
            control.update_clock(event_time);
            done(CONTINUE);
        }

        void play(time tstart)
        {
            abort();

            playback.device = sound_output_device;
            clip.file = stimuli_dir() + "sounds/" + item.sndfn;

            if (lightpos == LEFT_SIDE)
            {
                playback.set_scaling(0, 1.0);
                playback.set_scaling(1, 0.0);
            }
            else if (lightpos == RIGHT_SIDE)
            {
                playback.set_scaling(0, 0.0);
                playback.set_scaling(1, 1.0);
            }
            else
                playback.set_scaling(1.0);

            start(tstart);
        }
    }

    void setup()
    {
        control.target = this;
        control.button_box.disable_buttons();

        control.button_box.enable_button(BUTTON_LEFT, EVENT_START);
        control.button_box.enable_button(BUTTON_RIGHT, EVENT_STOP);

        control.reset_clock();

        // Enter the state I think.
        enter();
    }

    void action (Object caller, TestItem it, time tref)
    {
        item = it;
        
        if (running)
            audio.play(tref + INTER_STIMULUS_INTERVAL);

        // Update status
        control.setStatus(
                string(item.id) + " " + string(item.type) + " " +
                string(item.sndfn)
                );
    }
    
}
